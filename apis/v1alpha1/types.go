// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	"github.com/aws/aws-sdk-go/aws"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = ackv1alpha1.AWSAccountID("")
)

// Advanced event selectors let you create fine-grained selectors for the following
// CloudTrail event record ﬁelds. They help you control costs by logging only
// those events that are important to you. For more information about advanced
// event selectors, see Logging data events for trails (https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html)
// in the CloudTrail User Guide.
//
//   - readOnly
//
//   - eventSource
//
//   - eventName
//
//   - eventCategory
//
//   - resources.type
//
//   - resources.ARN
//
// You cannot apply both event selectors and advanced event selectors to a trail.
type AdvancedEventSelector struct {
	FieldSelectors []*AdvancedFieldSelector `json:"fieldSelectors,omitempty"`
	Name           *string                  `json:"name,omitempty"`
}

// A single selector statement in an advanced event selector.
type AdvancedFieldSelector struct {
	EndsWith      []*string `json:"endsWith,omitempty"`
	Equals        []*string `json:"equals,omitempty"`
	Field         *string   `json:"field,omitempty"`
	NotEndsWith   []*string `json:"notEndsWith,omitempty"`
	NotEquals     []*string `json:"notEquals,omitempty"`
	NotStartsWith []*string `json:"notStartsWith,omitempty"`
	StartsWith    []*string `json:"startsWith,omitempty"`
}

// The Amazon S3 buckets, Lambda functions, or Amazon DynamoDB tables that you
// specify in your event selectors for your trail to log data events. Data events
// provide information about the resource operations performed on or within
// a resource itself. These are also known as data plane operations. You can
// specify up to 250 data resources for a trail.
//
// The total number of allowed data resources is 250. This number can be distributed
// between 1 and 5 event selectors, but the total cannot exceed 250 across all
// selectors.
//
// If you are using advanced event selectors, the maximum total number of values
// for all conditions, across all advanced event selectors for the trail, is
// 500.
//
// The following example demonstrates how logging works when you configure logging
// of all data events for an S3 bucket named bucket-1. In this example, the
// CloudTrail user specified an empty prefix, and the option to log both Read
// and Write data events.
//
// A user uploads an image file to bucket-1.
//
// The PutObject API operation is an Amazon S3 object-level API. It is recorded
// as a data event in CloudTrail. Because the CloudTrail user specified an S3
// bucket with an empty prefix, events that occur on any object in that bucket
// are logged. The trail processes and logs the event.
//
// A user uploads an object to an Amazon S3 bucket named arn:aws:s3:::bucket-2.
//
// The PutObject API operation occurred for an object in an S3 bucket that the
// CloudTrail user didn't specify for the trail. The trail doesn’t log the
// event.
//
// The following example demonstrates how logging works when you configure logging
// of Lambda data events for a Lambda function named MyLambdaFunction, but not
// for all Lambda functions.
//
// A user runs a script that includes a call to the MyLambdaFunction function
// and the MyOtherLambdaFunction function.
//
// The Invoke API operation on MyLambdaFunction is an Lambda API. It is recorded
// as a data event in CloudTrail. Because the CloudTrail user specified logging
// data events for MyLambdaFunction, any invocations of that function are logged.
// The trail processes and logs the event.
//
// The Invoke API operation on MyOtherLambdaFunction is an Lambda API. Because
// the CloudTrail user did not specify logging data events for all Lambda functions,
// the Invoke operation for MyOtherLambdaFunction does not match the function
// specified for the trail. The trail doesn’t log the event.
type DataResource struct {
	Type *string `json:"type_,omitempty"`
}

// Contains information about an event that was returned by a lookup request.
// The result includes a representation of a CloudTrail event.
type Event struct {
	AccessKeyID     *string      `json:"accessKeyID,omitempty"`
	CloudTrailEvent *string      `json:"cloudTrailEvent,omitempty"`
	EventID         *string      `json:"eventID,omitempty"`
	EventName       *string      `json:"eventName,omitempty"`
	EventSource     *string      `json:"eventSource,omitempty"`
	EventTime       *metav1.Time `json:"eventTime,omitempty"`
	ReadOnly        *string      `json:"readOnly,omitempty"`
	Username        *string      `json:"username,omitempty"`
}

// A storage lake of event data against which you can run complex SQL-based
// queries. An event data store can include events that you have logged on your
// account from the last 90 to 2555 days (about three months to up to seven
// years). To select events for an event data store, use advanced event selectors
// (https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html#creating-data-event-selectors-advanced).
type EventDataStore_SDK struct {
	AdvancedEventSelectors       []*AdvancedEventSelector `json:"advancedEventSelectors,omitempty"`
	CreatedTimestamp             *metav1.Time             `json:"createdTimestamp,omitempty"`
	EventDataStoreARN            *string                  `json:"eventDataStoreARN,omitempty"`
	MultiRegionEnabled           *bool                    `json:"multiRegionEnabled,omitempty"`
	Name                         *string                  `json:"name,omitempty"`
	OrganizationEnabled          *bool                    `json:"organizationEnabled,omitempty"`
	RetentionPeriod              *int64                   `json:"retentionPeriod,omitempty"`
	Status                       *string                  `json:"status,omitempty"`
	TerminationProtectionEnabled *bool                    `json:"terminationProtectionEnabled,omitempty"`
	UpdatedTimestamp             *metav1.Time             `json:"updatedTimestamp,omitempty"`
}

// Use event selectors to further specify the management and data event settings
// for your trail. By default, trails created without specific event selectors
// will be configured to log all read and write management events, and no data
// events. When an event occurs in your account, CloudTrail evaluates the event
// selector for all trails. For each trail, if the event matches any event selector,
// the trail processes and logs the event. If the event doesn't match any event
// selector, the trail doesn't log the event.
//
// You can configure up to five event selectors for a trail.
//
// You cannot apply both event selectors and advanced event selectors to a trail.
type EventSelector struct {
	IncludeManagementEvents *bool `json:"includeManagementEvents,omitempty"`
}

// Specifies an attribute and value that filter the events returned.
type LookupAttribute struct {
	AttributeValue *string `json:"attributeValue,omitempty"`
}

// Contains information about a returned public key.
type PublicKey struct {
	Fingerprint       *string      `json:"fingerprint,omitempty"`
	ValidityEndTime   *metav1.Time `json:"validityEndTime,omitempty"`
	ValidityStartTime *metav1.Time `json:"validityStartTime,omitempty"`
}

// A SQL string of criteria about events that you want to collect in an event
// data store.
type Query struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
}

// Gets metadata about a query, including the number of events that were matched,
// the total number of events scanned, the query run time in milliseconds, and
// the query's creation time.
type QueryStatisticsForDescribeQuery struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
}

// Specifies the type and name of a resource referenced by an event.
type Resource struct {
	ResourceName *string `json:"resourceName,omitempty"`
	ResourceType *string `json:"resourceType,omitempty"`
}

// A resource tag.
type ResourceTag struct {
	ResourceID *string `json:"resourceID,omitempty"`
	// A list of tags.
	TagsList []*Tag `json:"tagsList,omitempty"`
}

// A custom key-value pair associated with a resource such as a CloudTrail trail.
type Tag struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// Information about a CloudTrail trail, including the trail's name, home region,
// and Amazon Resource Name (ARN).
type TrailInfo struct {
	HomeRegion *string `json:"homeRegion,omitempty"`
	Name       *string `json:"name,omitempty"`
	TrailARN   *string `json:"trailARN,omitempty"`
}

// The settings for a trail.
type Trail_SDK struct {
	CloudWatchLogsLogGroupARN  *string `json:"cloudWatchLogsLogGroupARN,omitempty"`
	CloudWatchLogsRoleARN      *string `json:"cloudWatchLogsRoleARN,omitempty"`
	HasCustomEventSelectors    *bool   `json:"hasCustomEventSelectors,omitempty"`
	HasInsightSelectors        *bool   `json:"hasInsightSelectors,omitempty"`
	HomeRegion                 *string `json:"homeRegion,omitempty"`
	IncludeGlobalServiceEvents *bool   `json:"includeGlobalServiceEvents,omitempty"`
	IsMultiRegionTrail         *bool   `json:"isMultiRegionTrail,omitempty"`
	IsOrganizationTrail        *bool   `json:"isOrganizationTrail,omitempty"`
	KMSKeyID                   *string `json:"kmsKeyID,omitempty"`
	LogFileValidationEnabled   *bool   `json:"logFileValidationEnabled,omitempty"`
	Name                       *string `json:"name,omitempty"`
	S3BucketName               *string `json:"s3BucketName,omitempty"`
	S3KeyPrefix                *string `json:"s3KeyPrefix,omitempty"`
	SNSTopicARN                *string `json:"snsTopicARN,omitempty"`
	SNSTopicName               *string `json:"snsTopicName,omitempty"`
	TrailARN                   *string `json:"trailARN,omitempty"`
}
