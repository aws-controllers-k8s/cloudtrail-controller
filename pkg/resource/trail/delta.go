// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package trail

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}
	customPreCompare(delta, a, b)

	if ackcompare.HasNilDifference(a.ko.Spec.CloudWatchLogsLogGroupARN, b.ko.Spec.CloudWatchLogsLogGroupARN) {
		delta.Add("Spec.CloudWatchLogsLogGroupARN", a.ko.Spec.CloudWatchLogsLogGroupARN, b.ko.Spec.CloudWatchLogsLogGroupARN)
	} else if a.ko.Spec.CloudWatchLogsLogGroupARN != nil && b.ko.Spec.CloudWatchLogsLogGroupARN != nil {
		if *a.ko.Spec.CloudWatchLogsLogGroupARN != *b.ko.Spec.CloudWatchLogsLogGroupARN {
			delta.Add("Spec.CloudWatchLogsLogGroupARN", a.ko.Spec.CloudWatchLogsLogGroupARN, b.ko.Spec.CloudWatchLogsLogGroupARN)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.CloudWatchLogsRoleARN, b.ko.Spec.CloudWatchLogsRoleARN) {
		delta.Add("Spec.CloudWatchLogsRoleARN", a.ko.Spec.CloudWatchLogsRoleARN, b.ko.Spec.CloudWatchLogsRoleARN)
	} else if a.ko.Spec.CloudWatchLogsRoleARN != nil && b.ko.Spec.CloudWatchLogsRoleARN != nil {
		if *a.ko.Spec.CloudWatchLogsRoleARN != *b.ko.Spec.CloudWatchLogsRoleARN {
			delta.Add("Spec.CloudWatchLogsRoleARN", a.ko.Spec.CloudWatchLogsRoleARN, b.ko.Spec.CloudWatchLogsRoleARN)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.EnableLogFileValidation, b.ko.Spec.EnableLogFileValidation) {
		delta.Add("Spec.EnableLogFileValidation", a.ko.Spec.EnableLogFileValidation, b.ko.Spec.EnableLogFileValidation)
	} else if a.ko.Spec.EnableLogFileValidation != nil && b.ko.Spec.EnableLogFileValidation != nil {
		if *a.ko.Spec.EnableLogFileValidation != *b.ko.Spec.EnableLogFileValidation {
			delta.Add("Spec.EnableLogFileValidation", a.ko.Spec.EnableLogFileValidation, b.ko.Spec.EnableLogFileValidation)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.IncludeGlobalServiceEvents, b.ko.Spec.IncludeGlobalServiceEvents) {
		delta.Add("Spec.IncludeGlobalServiceEvents", a.ko.Spec.IncludeGlobalServiceEvents, b.ko.Spec.IncludeGlobalServiceEvents)
	} else if a.ko.Spec.IncludeGlobalServiceEvents != nil && b.ko.Spec.IncludeGlobalServiceEvents != nil {
		if *a.ko.Spec.IncludeGlobalServiceEvents != *b.ko.Spec.IncludeGlobalServiceEvents {
			delta.Add("Spec.IncludeGlobalServiceEvents", a.ko.Spec.IncludeGlobalServiceEvents, b.ko.Spec.IncludeGlobalServiceEvents)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.IsMultiRegionTrail, b.ko.Spec.IsMultiRegionTrail) {
		delta.Add("Spec.IsMultiRegionTrail", a.ko.Spec.IsMultiRegionTrail, b.ko.Spec.IsMultiRegionTrail)
	} else if a.ko.Spec.IsMultiRegionTrail != nil && b.ko.Spec.IsMultiRegionTrail != nil {
		if *a.ko.Spec.IsMultiRegionTrail != *b.ko.Spec.IsMultiRegionTrail {
			delta.Add("Spec.IsMultiRegionTrail", a.ko.Spec.IsMultiRegionTrail, b.ko.Spec.IsMultiRegionTrail)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.IsOrganizationTrail, b.ko.Spec.IsOrganizationTrail) {
		delta.Add("Spec.IsOrganizationTrail", a.ko.Spec.IsOrganizationTrail, b.ko.Spec.IsOrganizationTrail)
	} else if a.ko.Spec.IsOrganizationTrail != nil && b.ko.Spec.IsOrganizationTrail != nil {
		if *a.ko.Spec.IsOrganizationTrail != *b.ko.Spec.IsOrganizationTrail {
			delta.Add("Spec.IsOrganizationTrail", a.ko.Spec.IsOrganizationTrail, b.ko.Spec.IsOrganizationTrail)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID) {
		delta.Add("Spec.KMSKeyID", a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID)
	} else if a.ko.Spec.KMSKeyID != nil && b.ko.Spec.KMSKeyID != nil {
		if *a.ko.Spec.KMSKeyID != *b.ko.Spec.KMSKeyID {
			delta.Add("Spec.KMSKeyID", a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Name, b.ko.Spec.Name) {
		delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
	} else if a.ko.Spec.Name != nil && b.ko.Spec.Name != nil {
		if *a.ko.Spec.Name != *b.ko.Spec.Name {
			delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.S3BucketName, b.ko.Spec.S3BucketName) {
		delta.Add("Spec.S3BucketName", a.ko.Spec.S3BucketName, b.ko.Spec.S3BucketName)
	} else if a.ko.Spec.S3BucketName != nil && b.ko.Spec.S3BucketName != nil {
		if *a.ko.Spec.S3BucketName != *b.ko.Spec.S3BucketName {
			delta.Add("Spec.S3BucketName", a.ko.Spec.S3BucketName, b.ko.Spec.S3BucketName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.S3KeyPrefix, b.ko.Spec.S3KeyPrefix) {
		delta.Add("Spec.S3KeyPrefix", a.ko.Spec.S3KeyPrefix, b.ko.Spec.S3KeyPrefix)
	} else if a.ko.Spec.S3KeyPrefix != nil && b.ko.Spec.S3KeyPrefix != nil {
		if *a.ko.Spec.S3KeyPrefix != *b.ko.Spec.S3KeyPrefix {
			delta.Add("Spec.S3KeyPrefix", a.ko.Spec.S3KeyPrefix, b.ko.Spec.S3KeyPrefix)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SNSTopicName, b.ko.Spec.SNSTopicName) {
		delta.Add("Spec.SNSTopicName", a.ko.Spec.SNSTopicName, b.ko.Spec.SNSTopicName)
	} else if a.ko.Spec.SNSTopicName != nil && b.ko.Spec.SNSTopicName != nil {
		if *a.ko.Spec.SNSTopicName != *b.ko.Spec.SNSTopicName {
			delta.Add("Spec.SNSTopicName", a.ko.Spec.SNSTopicName, b.ko.Spec.SNSTopicName)
		}
	}

	return delta
}
