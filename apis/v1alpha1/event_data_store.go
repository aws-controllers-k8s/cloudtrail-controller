// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EventDataStoreSpec defines the desired state of EventDataStore.
//
// A storage lake of event data against which you can run complex SQL-based
// queries. An event data store can include events that you have logged on your
// account. To select events for an event data store, use advanced event selectors
// (https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-lake-concepts.html#adv-event-selectors).
type EventDataStoreSpec struct {

	// The advanced event selectors to use to select the events for the data store.
	// You can configure up to five advanced event selectors for each event data
	// store.
	//
	// For more information about how to use advanced event selectors to log CloudTrail
	// events, see Log events by using advanced event selectors (https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html#creating-data-event-selectors-advanced)
	// in the CloudTrail User Guide.
	//
	// For more information about how to use advanced event selectors to include
	// Config configuration items in your event data store, see Create an event
	// data store for Config configuration items (https://docs.aws.amazon.com/awscloudtrail/latest/userguide/lake-eds-cli.html#lake-cli-create-eds-config)
	// in the CloudTrail User Guide.
	//
	// For more information about how to use advanced event selectors to include
	// events outside of Amazon Web Services events in your event data store, see
	// Create an integration to log events from outside Amazon Web Services (https://docs.aws.amazon.com/awscloudtrail/latest/userguide/lake-integrations-cli.html#lake-cli-create-integration)
	// in the CloudTrail User Guide.
	AdvancedEventSelectors []*AdvancedEventSelector `json:"advancedEventSelectors,omitempty"`
	// Specifies whether the event data store includes events from all Regions,
	// or only from the Region in which the event data store is created.
	MultiRegionEnabled *bool `json:"multiRegionEnabled,omitempty"`
	// The name of the event data store.
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// Specifies whether an event data store collects events logged for an organization
	// in Organizations.
	OrganizationEnabled *bool `json:"organizationEnabled,omitempty"`
	// The retention period of the event data store, in days. If BillingMode is
	// set to EXTENDABLE_RETENTION_PRICING, you can set a retention period of up
	// to 3653 days, the equivalent of 10 years. If BillingMode is set to FIXED_RETENTION_PRICING,
	// you can set a retention period of up to 2557 days, the equivalent of seven
	// years.
	//
	// CloudTrail Lake determines whether to retain an event by checking if the
	// eventTime of the event is within the specified retention period. For example,
	// if you set a retention period of 90 days, CloudTrail will remove events when
	// the eventTime is older than 90 days.
	//
	// If you plan to copy trail events to this event data store, we recommend that
	// you consider both the age of the events that you want to copy as well as
	// how long you want to keep the copied events in your event data store. For
	// example, if you copy trail events that are 5 years old and specify a retention
	// period of 7 years, the event data store will retain those events for two
	// years.
	RetentionPeriod *int64 `json:"retentionPeriod,omitempty"`
	Tags            []*Tag `json:"tags,omitempty"`
	// Specifies whether termination protection is enabled for the event data store.
	// If termination protection is enabled, you cannot delete the event data store
	// until termination protection is disabled.
	TerminationProtectionEnabled *bool `json:"terminationProtectionEnabled,omitempty"`
}

// EventDataStoreStatus defines the observed state of EventDataStore
type EventDataStoreStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The timestamp that shows when the event data store was created.
	// +kubebuilder:validation:Optional
	CreatedTimestamp *metav1.Time `json:"createdTimestamp,omitempty"`
	// The status of event data store creation.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty"`
	// The timestamp that shows when an event data store was updated, if applicable.
	// UpdatedTimestamp is always either the same or newer than the time shown in
	// CreatedTimestamp.
	// +kubebuilder:validation:Optional
	UpdatedTimestamp *metav1.Time `json:"updatedTimestamp,omitempty"`
}

// EventDataStore is the Schema for the EventDataStores API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type EventDataStore struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventDataStoreSpec   `json:"spec,omitempty"`
	Status            EventDataStoreStatus `json:"status,omitempty"`
}

// EventDataStoreList contains a list of EventDataStore
// +kubebuilder:object:root=true
type EventDataStoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventDataStore `json:"items"`
}

func init() {
	SchemeBuilder.Register(&EventDataStore{}, &EventDataStoreList{})
}
