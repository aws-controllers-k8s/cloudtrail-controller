// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package event_data_store

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/cloudtrail"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/cloudtrail-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.CloudTrail{}
	_ = &svcapitypes.EventDataStore{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}
	if r.ko.Status.ACKResourceMetadata == nil ||
		r.ko.Status.ACKResourceMetadata.ARN == nil {
		// If we don't return a ackerr.NotFound here, the API will return an
		// invalid ID or ARN error.
		return nil, ackerr.NotFound
		// Another solution would be to set the input id to "0-0-0-0-0"
		// Fun fact, the cloudtrail API generates UUID v4 for EventDataStores. When
		// trying to query an EDS using an empty ID the API returns an InvalidARN
		// Exception. However trying to get an EDS using 0-0-0-0-0 doesn't return
		// a InvalidIDOrARN exception... Yes, it is considered as a valid UUID v4).
		// So we can use this impossible to generate UUID v4 to guaranty that we
		// will get a 404 error.
	}
	// For ReadOne and delete operations EventDataStore should be populated with
	// the ARN or the ID (ID is not returned by the API).
	input.EventDataStore = (*string)(r.ko.Status.ACKResourceMetadata.ARN)

	var resp *svcsdk.GetEventDataStoreOutput
	resp, err = rm.sdkapi.GetEventDataStoreWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetEventDataStore", err)
	if err != nil {
		if reqErr, ok := ackerr.AWSRequestFailure(err); ok && reqErr.StatusCode() == 404 {
			return nil, ackerr.NotFound
		}
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.AdvancedEventSelectors != nil {
		f0 := []*svcapitypes.AdvancedEventSelector{}
		for _, f0iter := range resp.AdvancedEventSelectors {
			f0elem := &svcapitypes.AdvancedEventSelector{}
			if f0iter.FieldSelectors != nil {
				f0elemf0 := []*svcapitypes.AdvancedFieldSelector{}
				for _, f0elemf0iter := range f0iter.FieldSelectors {
					f0elemf0elem := &svcapitypes.AdvancedFieldSelector{}
					if f0elemf0iter.EndsWith != nil {
						f0elemf0elemf0 := []*string{}
						for _, f0elemf0elemf0iter := range f0elemf0iter.EndsWith {
							var f0elemf0elemf0elem string
							f0elemf0elemf0elem = *f0elemf0elemf0iter
							f0elemf0elemf0 = append(f0elemf0elemf0, &f0elemf0elemf0elem)
						}
						f0elemf0elem.EndsWith = f0elemf0elemf0
					}
					if f0elemf0iter.Equals != nil {
						f0elemf0elemf1 := []*string{}
						for _, f0elemf0elemf1iter := range f0elemf0iter.Equals {
							var f0elemf0elemf1elem string
							f0elemf0elemf1elem = *f0elemf0elemf1iter
							f0elemf0elemf1 = append(f0elemf0elemf1, &f0elemf0elemf1elem)
						}
						f0elemf0elem.Equals = f0elemf0elemf1
					}
					if f0elemf0iter.Field != nil {
						f0elemf0elem.Field = f0elemf0iter.Field
					}
					if f0elemf0iter.NotEndsWith != nil {
						f0elemf0elemf3 := []*string{}
						for _, f0elemf0elemf3iter := range f0elemf0iter.NotEndsWith {
							var f0elemf0elemf3elem string
							f0elemf0elemf3elem = *f0elemf0elemf3iter
							f0elemf0elemf3 = append(f0elemf0elemf3, &f0elemf0elemf3elem)
						}
						f0elemf0elem.NotEndsWith = f0elemf0elemf3
					}
					if f0elemf0iter.NotEquals != nil {
						f0elemf0elemf4 := []*string{}
						for _, f0elemf0elemf4iter := range f0elemf0iter.NotEquals {
							var f0elemf0elemf4elem string
							f0elemf0elemf4elem = *f0elemf0elemf4iter
							f0elemf0elemf4 = append(f0elemf0elemf4, &f0elemf0elemf4elem)
						}
						f0elemf0elem.NotEquals = f0elemf0elemf4
					}
					if f0elemf0iter.NotStartsWith != nil {
						f0elemf0elemf5 := []*string{}
						for _, f0elemf0elemf5iter := range f0elemf0iter.NotStartsWith {
							var f0elemf0elemf5elem string
							f0elemf0elemf5elem = *f0elemf0elemf5iter
							f0elemf0elemf5 = append(f0elemf0elemf5, &f0elemf0elemf5elem)
						}
						f0elemf0elem.NotStartsWith = f0elemf0elemf5
					}
					if f0elemf0iter.StartsWith != nil {
						f0elemf0elemf6 := []*string{}
						for _, f0elemf0elemf6iter := range f0elemf0iter.StartsWith {
							var f0elemf0elemf6elem string
							f0elemf0elemf6elem = *f0elemf0elemf6iter
							f0elemf0elemf6 = append(f0elemf0elemf6, &f0elemf0elemf6elem)
						}
						f0elemf0elem.StartsWith = f0elemf0elemf6
					}
					f0elemf0 = append(f0elemf0, f0elemf0elem)
				}
				f0elem.FieldSelectors = f0elemf0
			}
			if f0iter.Name != nil {
				f0elem.Name = f0iter.Name
			}
			f0 = append(f0, f0elem)
		}
		ko.Spec.AdvancedEventSelectors = f0
	} else {
		ko.Spec.AdvancedEventSelectors = nil
	}
	if resp.CreatedTimestamp != nil {
		ko.Status.CreatedTimestamp = &metav1.Time{*resp.CreatedTimestamp}
	} else {
		ko.Status.CreatedTimestamp = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.EventDataStoreArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.EventDataStoreArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.MultiRegionEnabled != nil {
		ko.Spec.MultiRegionEnabled = resp.MultiRegionEnabled
	} else {
		ko.Spec.MultiRegionEnabled = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.OrganizationEnabled != nil {
		ko.Spec.OrganizationEnabled = resp.OrganizationEnabled
	} else {
		ko.Spec.OrganizationEnabled = nil
	}
	if resp.RetentionPeriod != nil {
		ko.Spec.RetentionPeriod = resp.RetentionPeriod
	} else {
		ko.Spec.RetentionPeriod = nil
	}
	if resp.Status != nil {
		ko.Status.Status = resp.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.TerminationProtectionEnabled != nil {
		ko.Spec.TerminationProtectionEnabled = resp.TerminationProtectionEnabled
	} else {
		ko.Spec.TerminationProtectionEnabled = nil
	}
	if resp.UpdatedTimestamp != nil {
		ko.Status.UpdatedTimestamp = &metav1.Time{*resp.UpdatedTimestamp}
	} else {
		ko.Status.UpdatedTimestamp = nil
	}

	rm.setStatusDefaults(ko)
	if err := rm.setResourceAdditionalFields(ctx, ko); err != nil {
		return nil, err
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.Name == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetEventDataStoreInput, error) {
	res := &svcsdk.GetEventDataStoreInput{}

	if r.ko.Spec.Name != nil {
		res.SetEventDataStore(*r.ko.Spec.Name)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateEventDataStoreOutput
	_ = resp
	resp, err = rm.sdkapi.CreateEventDataStoreWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateEventDataStore", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.AdvancedEventSelectors != nil {
		f0 := []*svcapitypes.AdvancedEventSelector{}
		for _, f0iter := range resp.AdvancedEventSelectors {
			f0elem := &svcapitypes.AdvancedEventSelector{}
			if f0iter.FieldSelectors != nil {
				f0elemf0 := []*svcapitypes.AdvancedFieldSelector{}
				for _, f0elemf0iter := range f0iter.FieldSelectors {
					f0elemf0elem := &svcapitypes.AdvancedFieldSelector{}
					if f0elemf0iter.EndsWith != nil {
						f0elemf0elemf0 := []*string{}
						for _, f0elemf0elemf0iter := range f0elemf0iter.EndsWith {
							var f0elemf0elemf0elem string
							f0elemf0elemf0elem = *f0elemf0elemf0iter
							f0elemf0elemf0 = append(f0elemf0elemf0, &f0elemf0elemf0elem)
						}
						f0elemf0elem.EndsWith = f0elemf0elemf0
					}
					if f0elemf0iter.Equals != nil {
						f0elemf0elemf1 := []*string{}
						for _, f0elemf0elemf1iter := range f0elemf0iter.Equals {
							var f0elemf0elemf1elem string
							f0elemf0elemf1elem = *f0elemf0elemf1iter
							f0elemf0elemf1 = append(f0elemf0elemf1, &f0elemf0elemf1elem)
						}
						f0elemf0elem.Equals = f0elemf0elemf1
					}
					if f0elemf0iter.Field != nil {
						f0elemf0elem.Field = f0elemf0iter.Field
					}
					if f0elemf0iter.NotEndsWith != nil {
						f0elemf0elemf3 := []*string{}
						for _, f0elemf0elemf3iter := range f0elemf0iter.NotEndsWith {
							var f0elemf0elemf3elem string
							f0elemf0elemf3elem = *f0elemf0elemf3iter
							f0elemf0elemf3 = append(f0elemf0elemf3, &f0elemf0elemf3elem)
						}
						f0elemf0elem.NotEndsWith = f0elemf0elemf3
					}
					if f0elemf0iter.NotEquals != nil {
						f0elemf0elemf4 := []*string{}
						for _, f0elemf0elemf4iter := range f0elemf0iter.NotEquals {
							var f0elemf0elemf4elem string
							f0elemf0elemf4elem = *f0elemf0elemf4iter
							f0elemf0elemf4 = append(f0elemf0elemf4, &f0elemf0elemf4elem)
						}
						f0elemf0elem.NotEquals = f0elemf0elemf4
					}
					if f0elemf0iter.NotStartsWith != nil {
						f0elemf0elemf5 := []*string{}
						for _, f0elemf0elemf5iter := range f0elemf0iter.NotStartsWith {
							var f0elemf0elemf5elem string
							f0elemf0elemf5elem = *f0elemf0elemf5iter
							f0elemf0elemf5 = append(f0elemf0elemf5, &f0elemf0elemf5elem)
						}
						f0elemf0elem.NotStartsWith = f0elemf0elemf5
					}
					if f0elemf0iter.StartsWith != nil {
						f0elemf0elemf6 := []*string{}
						for _, f0elemf0elemf6iter := range f0elemf0iter.StartsWith {
							var f0elemf0elemf6elem string
							f0elemf0elemf6elem = *f0elemf0elemf6iter
							f0elemf0elemf6 = append(f0elemf0elemf6, &f0elemf0elemf6elem)
						}
						f0elemf0elem.StartsWith = f0elemf0elemf6
					}
					f0elemf0 = append(f0elemf0, f0elemf0elem)
				}
				f0elem.FieldSelectors = f0elemf0
			}
			if f0iter.Name != nil {
				f0elem.Name = f0iter.Name
			}
			f0 = append(f0, f0elem)
		}
		ko.Spec.AdvancedEventSelectors = f0
	} else {
		ko.Spec.AdvancedEventSelectors = nil
	}
	if resp.CreatedTimestamp != nil {
		ko.Status.CreatedTimestamp = &metav1.Time{*resp.CreatedTimestamp}
	} else {
		ko.Status.CreatedTimestamp = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.EventDataStoreArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.EventDataStoreArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.MultiRegionEnabled != nil {
		ko.Spec.MultiRegionEnabled = resp.MultiRegionEnabled
	} else {
		ko.Spec.MultiRegionEnabled = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.OrganizationEnabled != nil {
		ko.Spec.OrganizationEnabled = resp.OrganizationEnabled
	} else {
		ko.Spec.OrganizationEnabled = nil
	}
	if resp.RetentionPeriod != nil {
		ko.Spec.RetentionPeriod = resp.RetentionPeriod
	} else {
		ko.Spec.RetentionPeriod = nil
	}
	if resp.Status != nil {
		ko.Status.Status = resp.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.TagsList != nil {
		f8 := []*svcapitypes.Tag{}
		for _, f8iter := range resp.TagsList {
			f8elem := &svcapitypes.Tag{}
			if f8iter.Key != nil {
				f8elem.Key = f8iter.Key
			}
			if f8iter.Value != nil {
				f8elem.Value = f8iter.Value
			}
			f8 = append(f8, f8elem)
		}
		ko.Spec.Tags = f8
	} else {
		ko.Spec.Tags = nil
	}
	if resp.TerminationProtectionEnabled != nil {
		ko.Spec.TerminationProtectionEnabled = resp.TerminationProtectionEnabled
	} else {
		ko.Spec.TerminationProtectionEnabled = nil
	}
	if resp.UpdatedTimestamp != nil {
		ko.Status.UpdatedTimestamp = &metav1.Time{*resp.UpdatedTimestamp}
	} else {
		ko.Status.UpdatedTimestamp = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateEventDataStoreInput, error) {
	res := &svcsdk.CreateEventDataStoreInput{}

	if r.ko.Spec.AdvancedEventSelectors != nil {
		f0 := []*svcsdk.AdvancedEventSelector{}
		for _, f0iter := range r.ko.Spec.AdvancedEventSelectors {
			f0elem := &svcsdk.AdvancedEventSelector{}
			if f0iter.FieldSelectors != nil {
				f0elemf0 := []*svcsdk.AdvancedFieldSelector{}
				for _, f0elemf0iter := range f0iter.FieldSelectors {
					f0elemf0elem := &svcsdk.AdvancedFieldSelector{}
					if f0elemf0iter.EndsWith != nil {
						f0elemf0elemf0 := []*string{}
						for _, f0elemf0elemf0iter := range f0elemf0iter.EndsWith {
							var f0elemf0elemf0elem string
							f0elemf0elemf0elem = *f0elemf0elemf0iter
							f0elemf0elemf0 = append(f0elemf0elemf0, &f0elemf0elemf0elem)
						}
						f0elemf0elem.SetEndsWith(f0elemf0elemf0)
					}
					if f0elemf0iter.Equals != nil {
						f0elemf0elemf1 := []*string{}
						for _, f0elemf0elemf1iter := range f0elemf0iter.Equals {
							var f0elemf0elemf1elem string
							f0elemf0elemf1elem = *f0elemf0elemf1iter
							f0elemf0elemf1 = append(f0elemf0elemf1, &f0elemf0elemf1elem)
						}
						f0elemf0elem.SetEquals(f0elemf0elemf1)
					}
					if f0elemf0iter.Field != nil {
						f0elemf0elem.SetField(*f0elemf0iter.Field)
					}
					if f0elemf0iter.NotEndsWith != nil {
						f0elemf0elemf3 := []*string{}
						for _, f0elemf0elemf3iter := range f0elemf0iter.NotEndsWith {
							var f0elemf0elemf3elem string
							f0elemf0elemf3elem = *f0elemf0elemf3iter
							f0elemf0elemf3 = append(f0elemf0elemf3, &f0elemf0elemf3elem)
						}
						f0elemf0elem.SetNotEndsWith(f0elemf0elemf3)
					}
					if f0elemf0iter.NotEquals != nil {
						f0elemf0elemf4 := []*string{}
						for _, f0elemf0elemf4iter := range f0elemf0iter.NotEquals {
							var f0elemf0elemf4elem string
							f0elemf0elemf4elem = *f0elemf0elemf4iter
							f0elemf0elemf4 = append(f0elemf0elemf4, &f0elemf0elemf4elem)
						}
						f0elemf0elem.SetNotEquals(f0elemf0elemf4)
					}
					if f0elemf0iter.NotStartsWith != nil {
						f0elemf0elemf5 := []*string{}
						for _, f0elemf0elemf5iter := range f0elemf0iter.NotStartsWith {
							var f0elemf0elemf5elem string
							f0elemf0elemf5elem = *f0elemf0elemf5iter
							f0elemf0elemf5 = append(f0elemf0elemf5, &f0elemf0elemf5elem)
						}
						f0elemf0elem.SetNotStartsWith(f0elemf0elemf5)
					}
					if f0elemf0iter.StartsWith != nil {
						f0elemf0elemf6 := []*string{}
						for _, f0elemf0elemf6iter := range f0elemf0iter.StartsWith {
							var f0elemf0elemf6elem string
							f0elemf0elemf6elem = *f0elemf0elemf6iter
							f0elemf0elemf6 = append(f0elemf0elemf6, &f0elemf0elemf6elem)
						}
						f0elemf0elem.SetStartsWith(f0elemf0elemf6)
					}
					f0elemf0 = append(f0elemf0, f0elemf0elem)
				}
				f0elem.SetFieldSelectors(f0elemf0)
			}
			if f0iter.Name != nil {
				f0elem.SetName(*f0iter.Name)
			}
			f0 = append(f0, f0elem)
		}
		res.SetAdvancedEventSelectors(f0)
	}
	if r.ko.Spec.MultiRegionEnabled != nil {
		res.SetMultiRegionEnabled(*r.ko.Spec.MultiRegionEnabled)
	}
	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.OrganizationEnabled != nil {
		res.SetOrganizationEnabled(*r.ko.Spec.OrganizationEnabled)
	}
	if r.ko.Spec.RetentionPeriod != nil {
		res.SetRetentionPeriod(*r.ko.Spec.RetentionPeriod)
	}
	if r.ko.Spec.Tags != nil {
		f5 := []*svcsdk.Tag{}
		for _, f5iter := range r.ko.Spec.Tags {
			f5elem := &svcsdk.Tag{}
			if f5iter.Key != nil {
				f5elem.SetKey(*f5iter.Key)
			}
			if f5iter.Value != nil {
				f5elem.SetValue(*f5iter.Value)
			}
			f5 = append(f5, f5elem)
		}
		res.SetTagsList(f5)
	}
	if r.ko.Spec.TerminationProtectionEnabled != nil {
		res.SetTerminationProtectionEnabled(*r.ko.Spec.TerminationProtectionEnabled)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if delta.DifferentAt("Spec.Tags") {
		err = rm.syncTags(ctx, latest, desired)
		if err != nil {
			return nil, err
		}
	} else if !delta.DifferentExcept("Spec.Tags") {
		return desired, nil
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	// For Read, Update and Delete operations, EventDataStore should be populated with
	// the ARN or the ID (ID is not returned by the API).
	input.EventDataStore = (*string)(desired.ko.Status.ACKResourceMetadata.ARN)

	var resp *svcsdk.UpdateEventDataStoreOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateEventDataStoreWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateEventDataStore", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.AdvancedEventSelectors != nil {
		f0 := []*svcapitypes.AdvancedEventSelector{}
		for _, f0iter := range resp.AdvancedEventSelectors {
			f0elem := &svcapitypes.AdvancedEventSelector{}
			if f0iter.FieldSelectors != nil {
				f0elemf0 := []*svcapitypes.AdvancedFieldSelector{}
				for _, f0elemf0iter := range f0iter.FieldSelectors {
					f0elemf0elem := &svcapitypes.AdvancedFieldSelector{}
					if f0elemf0iter.EndsWith != nil {
						f0elemf0elemf0 := []*string{}
						for _, f0elemf0elemf0iter := range f0elemf0iter.EndsWith {
							var f0elemf0elemf0elem string
							f0elemf0elemf0elem = *f0elemf0elemf0iter
							f0elemf0elemf0 = append(f0elemf0elemf0, &f0elemf0elemf0elem)
						}
						f0elemf0elem.EndsWith = f0elemf0elemf0
					}
					if f0elemf0iter.Equals != nil {
						f0elemf0elemf1 := []*string{}
						for _, f0elemf0elemf1iter := range f0elemf0iter.Equals {
							var f0elemf0elemf1elem string
							f0elemf0elemf1elem = *f0elemf0elemf1iter
							f0elemf0elemf1 = append(f0elemf0elemf1, &f0elemf0elemf1elem)
						}
						f0elemf0elem.Equals = f0elemf0elemf1
					}
					if f0elemf0iter.Field != nil {
						f0elemf0elem.Field = f0elemf0iter.Field
					}
					if f0elemf0iter.NotEndsWith != nil {
						f0elemf0elemf3 := []*string{}
						for _, f0elemf0elemf3iter := range f0elemf0iter.NotEndsWith {
							var f0elemf0elemf3elem string
							f0elemf0elemf3elem = *f0elemf0elemf3iter
							f0elemf0elemf3 = append(f0elemf0elemf3, &f0elemf0elemf3elem)
						}
						f0elemf0elem.NotEndsWith = f0elemf0elemf3
					}
					if f0elemf0iter.NotEquals != nil {
						f0elemf0elemf4 := []*string{}
						for _, f0elemf0elemf4iter := range f0elemf0iter.NotEquals {
							var f0elemf0elemf4elem string
							f0elemf0elemf4elem = *f0elemf0elemf4iter
							f0elemf0elemf4 = append(f0elemf0elemf4, &f0elemf0elemf4elem)
						}
						f0elemf0elem.NotEquals = f0elemf0elemf4
					}
					if f0elemf0iter.NotStartsWith != nil {
						f0elemf0elemf5 := []*string{}
						for _, f0elemf0elemf5iter := range f0elemf0iter.NotStartsWith {
							var f0elemf0elemf5elem string
							f0elemf0elemf5elem = *f0elemf0elemf5iter
							f0elemf0elemf5 = append(f0elemf0elemf5, &f0elemf0elemf5elem)
						}
						f0elemf0elem.NotStartsWith = f0elemf0elemf5
					}
					if f0elemf0iter.StartsWith != nil {
						f0elemf0elemf6 := []*string{}
						for _, f0elemf0elemf6iter := range f0elemf0iter.StartsWith {
							var f0elemf0elemf6elem string
							f0elemf0elemf6elem = *f0elemf0elemf6iter
							f0elemf0elemf6 = append(f0elemf0elemf6, &f0elemf0elemf6elem)
						}
						f0elemf0elem.StartsWith = f0elemf0elemf6
					}
					f0elemf0 = append(f0elemf0, f0elemf0elem)
				}
				f0elem.FieldSelectors = f0elemf0
			}
			if f0iter.Name != nil {
				f0elem.Name = f0iter.Name
			}
			f0 = append(f0, f0elem)
		}
		ko.Spec.AdvancedEventSelectors = f0
	} else {
		ko.Spec.AdvancedEventSelectors = nil
	}
	if resp.CreatedTimestamp != nil {
		ko.Status.CreatedTimestamp = &metav1.Time{*resp.CreatedTimestamp}
	} else {
		ko.Status.CreatedTimestamp = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.EventDataStoreArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.EventDataStoreArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.MultiRegionEnabled != nil {
		ko.Spec.MultiRegionEnabled = resp.MultiRegionEnabled
	} else {
		ko.Spec.MultiRegionEnabled = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.OrganizationEnabled != nil {
		ko.Spec.OrganizationEnabled = resp.OrganizationEnabled
	} else {
		ko.Spec.OrganizationEnabled = nil
	}
	if resp.RetentionPeriod != nil {
		ko.Spec.RetentionPeriod = resp.RetentionPeriod
	} else {
		ko.Spec.RetentionPeriod = nil
	}
	if resp.Status != nil {
		ko.Status.Status = resp.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.TerminationProtectionEnabled != nil {
		ko.Spec.TerminationProtectionEnabled = resp.TerminationProtectionEnabled
	} else {
		ko.Spec.TerminationProtectionEnabled = nil
	}
	if resp.UpdatedTimestamp != nil {
		ko.Status.UpdatedTimestamp = &metav1.Time{*resp.UpdatedTimestamp}
	} else {
		ko.Status.UpdatedTimestamp = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateEventDataStoreInput, error) {
	res := &svcsdk.UpdateEventDataStoreInput{}

	if r.ko.Spec.AdvancedEventSelectors != nil {
		f0 := []*svcsdk.AdvancedEventSelector{}
		for _, f0iter := range r.ko.Spec.AdvancedEventSelectors {
			f0elem := &svcsdk.AdvancedEventSelector{}
			if f0iter.FieldSelectors != nil {
				f0elemf0 := []*svcsdk.AdvancedFieldSelector{}
				for _, f0elemf0iter := range f0iter.FieldSelectors {
					f0elemf0elem := &svcsdk.AdvancedFieldSelector{}
					if f0elemf0iter.EndsWith != nil {
						f0elemf0elemf0 := []*string{}
						for _, f0elemf0elemf0iter := range f0elemf0iter.EndsWith {
							var f0elemf0elemf0elem string
							f0elemf0elemf0elem = *f0elemf0elemf0iter
							f0elemf0elemf0 = append(f0elemf0elemf0, &f0elemf0elemf0elem)
						}
						f0elemf0elem.SetEndsWith(f0elemf0elemf0)
					}
					if f0elemf0iter.Equals != nil {
						f0elemf0elemf1 := []*string{}
						for _, f0elemf0elemf1iter := range f0elemf0iter.Equals {
							var f0elemf0elemf1elem string
							f0elemf0elemf1elem = *f0elemf0elemf1iter
							f0elemf0elemf1 = append(f0elemf0elemf1, &f0elemf0elemf1elem)
						}
						f0elemf0elem.SetEquals(f0elemf0elemf1)
					}
					if f0elemf0iter.Field != nil {
						f0elemf0elem.SetField(*f0elemf0iter.Field)
					}
					if f0elemf0iter.NotEndsWith != nil {
						f0elemf0elemf3 := []*string{}
						for _, f0elemf0elemf3iter := range f0elemf0iter.NotEndsWith {
							var f0elemf0elemf3elem string
							f0elemf0elemf3elem = *f0elemf0elemf3iter
							f0elemf0elemf3 = append(f0elemf0elemf3, &f0elemf0elemf3elem)
						}
						f0elemf0elem.SetNotEndsWith(f0elemf0elemf3)
					}
					if f0elemf0iter.NotEquals != nil {
						f0elemf0elemf4 := []*string{}
						for _, f0elemf0elemf4iter := range f0elemf0iter.NotEquals {
							var f0elemf0elemf4elem string
							f0elemf0elemf4elem = *f0elemf0elemf4iter
							f0elemf0elemf4 = append(f0elemf0elemf4, &f0elemf0elemf4elem)
						}
						f0elemf0elem.SetNotEquals(f0elemf0elemf4)
					}
					if f0elemf0iter.NotStartsWith != nil {
						f0elemf0elemf5 := []*string{}
						for _, f0elemf0elemf5iter := range f0elemf0iter.NotStartsWith {
							var f0elemf0elemf5elem string
							f0elemf0elemf5elem = *f0elemf0elemf5iter
							f0elemf0elemf5 = append(f0elemf0elemf5, &f0elemf0elemf5elem)
						}
						f0elemf0elem.SetNotStartsWith(f0elemf0elemf5)
					}
					if f0elemf0iter.StartsWith != nil {
						f0elemf0elemf6 := []*string{}
						for _, f0elemf0elemf6iter := range f0elemf0iter.StartsWith {
							var f0elemf0elemf6elem string
							f0elemf0elemf6elem = *f0elemf0elemf6iter
							f0elemf0elemf6 = append(f0elemf0elemf6, &f0elemf0elemf6elem)
						}
						f0elemf0elem.SetStartsWith(f0elemf0elemf6)
					}
					f0elemf0 = append(f0elemf0, f0elemf0elem)
				}
				f0elem.SetFieldSelectors(f0elemf0)
			}
			if f0iter.Name != nil {
				f0elem.SetName(*f0iter.Name)
			}
			f0 = append(f0, f0elem)
		}
		res.SetAdvancedEventSelectors(f0)
	}
	if r.ko.Spec.MultiRegionEnabled != nil {
		res.SetMultiRegionEnabled(*r.ko.Spec.MultiRegionEnabled)
	}
	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.OrganizationEnabled != nil {
		res.SetOrganizationEnabled(*r.ko.Spec.OrganizationEnabled)
	}
	if r.ko.Spec.RetentionPeriod != nil {
		res.SetRetentionPeriod(*r.ko.Spec.RetentionPeriod)
	}
	if r.ko.Spec.TerminationProtectionEnabled != nil {
		res.SetTerminationProtectionEnabled(*r.ko.Spec.TerminationProtectionEnabled)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	// For ReadOne and delete operations EventDataStore should be populated with
	// the ARN or the ID (ID is not returned by the API).
	input.EventDataStore = (*string)(r.ko.Status.ACKResourceMetadata.ARN)

	var resp *svcsdk.DeleteEventDataStoreOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteEventDataStoreWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteEventDataStore", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteEventDataStoreInput, error) {
	res := &svcsdk.DeleteEventDataStoreInput{}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.EventDataStore,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
